type Query {
    books: [Book]
    matches(perPage: Int, page: Int): [Match]
    match(uid: ID!): Match
    players(perPage: Int, page: Int, name: String): [Player]
    player(uid: ID!): [Player]
}

type Mutation{
    addMatch: Boolean
    updatePlayer: Boolean
}
type Book {
    title: String
    author: String
}

enum CompetitorType {
 OneVsOne
 TwoVsTwo
 ThreeVsThree
 FourVsFour
 FreeForAll
}

type Match {
    uid: ID!
    title: String
    competitorType: CompetitorType
    bestOf: Int
    Started: String
    finished: String
    lastUpdate: String
    # bets: Bet[];
    #matchCompetitor: MatchCompetitor[];
    #matchInformation: MatchInformation[];
}

type Player {
    uid: ID
    steamId: String
    name: String
    steamName: String
    country: String
    clan: String
    aoe2NetRating: Int
    aoeEloComRating: Int
    rating: Int
    averageRating: Int
    gamesPlayed: Int
    gamesWon: Int
    gamesDropped: Int
    winStreak: Int
}
